using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using SmallProjects2.Data;
using SmallProjects2.Model;
using SmallProjects2.Dtos;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using SmallProjects2.Migrations;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Text;
using SmallProjects2.Services;

namespace SmallProjects2.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly TokenService _tokenservice;
        private readonly IConfiguration _config;

        public AuthController(AppDbContext context, IConfiguration config, TokenService tokenService)
        {
            _tokenservice = tokenService;
            _context = context;
            _config = config;
        }

        [HttpPost("register")]
        [AllowAnonymous]
        public async Task<IActionResult> Register([FromBody] RegisterDto model)
        {
            if (await _context.Users.AnyAsync(u => u.Email == model.Email))
                return BadRequest("Email is already in use.");

            var user = new User
            {
                FirstName = model.FirstName,
                LastName = model.LastName,
                UserName = model.UserName,
                Email = model.Email,
                Password = BCrypt.Net.BCrypt.HashPassword(model.Password),
                Role = model.Role == Role.seller ? Role.Pending : Role.user
            };

            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            var token = _tokenservice.GenerateJwtToken(user);

            if (user.Role == Role.Pending)
            {
                return Ok(new
                {
                    Message = "Registered as a seller. Please complete your store information.",
                    Token = token
                });
            }

            return Ok(new { Token = token });
        }


        [HttpPost("login")]
        [AllowAnonymous]
        public async Task<IActionResult> Login([FromBody] LoginDTO model)
        {
            // Check hardcoded Admins from appsettings
            var adminList = _config.GetSection("Admins").Get<List<AdminConfigModel>>();

            var matchedAdmin = adminList.FirstOrDefault(a =>
                a.Email == model.Email && a.Password == model.Password);

            if (matchedAdmin != null)
            {
                var adminUser = new User
                {
                    UserId = 0, // أو أي رقم ثابت
                    UserName = "Admin",
                    Email = matchedAdmin.Email,
                    Role = Role.admin
                };

                var token = _tokenservice.GenerateJwtToken(adminUser);
                return Ok(new { Token = token });
            }

            // Otherwise, proceed with normal user login
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == model.Email);
            if (user == null || !BCrypt.Net.BCrypt.Verify(model.Password, user.Password))
                return Unauthorized("Invalid email or password.");

            if (user.Role == Role.Pending)
            {
                var storeRequest = await _context.StoreRequests.FirstOrDefaultAsync(s => s.UserId == user.UserId);
                if (storeRequest != null && storeRequest.Status == SellerStatus.Pending)
                    return Unauthorized("Your seller request is under review, please wait for admin approval.");
            }

            var userToken = _tokenservice.GenerateJwtToken(user);
            return Ok(new { Token = userToken });
        }
        [HttpPost("forget-password")]
        [AllowAnonymous]
        public async Task<IActionResult> ForgetPassword([FromBody] string email)
        {
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null)
                return NotFound("Email not found.");

            var token = Guid.NewGuid().ToString();
            user.ResetToken = token;
            user.ResetTokenExpires = DateTime.UtcNow.AddMinutes(30); // ينتهي خلال 30 دقيقة

            await _context.SaveChangesAsync();

            // في التطبيق الحقيقي ترسله بالإيميل
            return Ok(new { message = "Password reset token generated.", token });
        }
        [HttpPost("reset-password")]
        [AllowAnonymous]
        public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordDto model)
        {
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == model.Email && u.ResetToken == model.Token);
            if (user == null || user.ResetTokenExpires < DateTime.UtcNow)
                return BadRequest("Invalid or expired token.");

            user.Password = BCrypt.Net.BCrypt.HashPassword(model.NewPassword);
            user.ResetToken = null;
            user.ResetTokenExpires = null;

            await _context.SaveChangesAsync();
            return Ok(new { message = "Password has been reset successfully." });
        }



      
    
       
    }

}